generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["typedSql", "driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

enum GameId {
  none
  coe33
}

enum BuildVisibility {
  PUBLIC
  UNLISTED
  PRIVATE
}

enum BuildModeratorStatus {
  PENDING
  APPROVED
  REJECTED
  LOCKED
}

model User {
  id                      String                   @id @default(cuid())
  username                String                   @unique
  email                   String                   @unique
  emailVerified           Boolean                  @default(false)
  passwordHash            String
  sessions                Session[]
  passwordResetTokens     PasswordResetToken[]
  emailVerificationTokens EmailVerificationToken[]

  userProfile       UserProfile?
  userFavoriteGames UserFavoriteGame[]

  usersBeingFollowed UserFollowedUsers[] @relation("userBeingFollowed")
  usersFollowed      UserFollowedUsers[] @relation("userFollowed")

  coe33CollectedItems   COE33CollectedItem[]
  coe33Builds           COE33Build[]
  coe33BuildCollections COE33BuildCollection[]
}

model Session {
  id        String   @id
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@index([userId])
}

model PasswordResetToken {
  tokenHash String   @unique
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
  userId    String

  @@index([userId])
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  code      String
  expiresAt DateTime
  email     String
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
  userId    String

  @@index([userId])
}

model UserProfile {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  displayName String   @default("Traveler")
  bio         String   @default("No bio provided.") @db.Text
  avatarUrl   String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String   @unique

  @@index([userId])
}

model UserFavoriteGame {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  gameId    GameId

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@id(name: "id", [userId, gameId])
  @@index([userId])
}

model UserFollowedUsers {
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation("userBeingFollowed", fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  followedUser   User     @relation("userFollowed", fields: [followedUserId], references: [id], onDelete: Cascade)
  followedUserId String

  @@id(name: "id", [userId, followedUserId])
  @@index([userId])
  @@index([followedUserId])
}
